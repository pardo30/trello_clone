{"version":3,"sources":["actions/columnActions.jsx","actions/index.jsx","components/TrelloCard.jsx","actions/cardActions.jsx","components/TrelloForm.jsx","components/TrelloColumn.jsx","App.js","reducers/listReducer.jsx","reducers/index.jsx","store/index.jsx","index.js"],"names":["deleteColumn","columnId","type","Actions","DELETE_COLUMN","payload","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","DRAG_HAPPEND","ADD_COLUMN","ADD_CARD","DELETE_CARD","TrelloCard","props","handleDeleteCard","dispatch","cardId","deleteCard","id","String","this","index","provided","ref","innerRef","dragHandleProps","draggableProps","className","text","onClick","Component","connect","TrelloForm","openForm","setState","formOpen","closeForm","handleInputChange","e","target","value","handleAddColumn","title","state","handleAddCard","addCard","buttonForm","buttonText","addForm","placeholder","autoFocus","onBlur","onChange","onMouseDown","TrelloColumn","handleDeleteColumn","droppableId","droppableProps","cards","map","card","App","onDragEnd","result","destination","source","lists","direction","column","initialState","listReducer","action","newColumn","newCard","newState","newDeleteStateColumn","filter","newDeleteStateCard","console","log","newDragState","splice","find","columnStart","columnEnd","combineReducers","store","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1eb3c68e.chunk.js","sourcesContent":["import { Actions } from '../actions';\n\nexport const addColumn = (title) => {\n    return {\n        type: Actions.ADD_COLUMN,\n        payload: title\n    };\n}\n\nexport const deleteColumn = (columnId) => {\n    return {\n        type: Actions.DELETE_COLUMN,\n        payload: columnId\n    };\n}\n\nexport const sort = (\n    droppableIdStart,\n    droppableIdEnd,\n    droppableIndexStart,\n    droppableIndexEnd,\n    draggableId,\n    type\n) => {\n    return {\n        type: Actions.DRAG_HAPPEND,\n        payload: {\n            droppableIdStart,\n            droppableIdEnd,\n            droppableIndexStart,\n            droppableIndexEnd,\n            draggableId,\n            type\n        }\n    }\n}","export * from './cardActions';\nexport * from './columnActions';\n\nexport const Actions = {\n    ADD_COLUMN: 'ADD_COLUMN',\n    ADD_CARD: 'ADD_CARD',\n    DELETE_COLUMN: 'DELETE_COLUMN',\n    DELETE_CARD: 'DELETE_CARD',\n    DRAG_HAPPEND: 'DRAG_HAPPEND',\n    \n};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { deleteCard } from '../actions';\nimport './TrelloCard.css';\n\n\nexport class TrelloCard extends Component {\n    constructor(props) {\n        super(props);\n    };\n    \n    handleDeleteCard = () =>{\n        const { dispatch } = this.props\n        const cardId = this.props.id\n        const columnId = this.props.columnId\n        dispatch(deleteCard(cardId,columnId));\n     }\n\n\n    render() {\n        return (\n            <Draggable draggableId={String(this.props.id)} index={this.props.index}>\n            {provided => (\n                <div \n                    ref={provided.innerRef} \n                        {...provided.dragHandleProps} \n                        {...provided.draggableProps}>\n                    <div className='card' id={this.props.id}>\n                        <div className='cardText'>{this.props.text}</div>\n                        <button className='cardButton' onClick={this.handleDeleteCard}>X</button>\n                    </div>\n                </div>\n            )}\n            </Draggable>\n        )\n    }\n}\n\nexport default connect () (TrelloCard);","import { Actions } from '../actions';\n\nexport const addCard = (text, columnId) => {\n    return {\n        type: Actions.ADD_CARD,\n        payload: {text, columnId}\n    };\n}\n\nexport const deleteCard = (cardId, columnId) => {\n    return {\n        type: Actions.DELETE_CARD,\n        payload: {cardId, columnId}\n    };\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addColumn, addCard } from '../actions';\nimport './TrelloForm.css';\n\nexport class TrelloForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            formOpen: false,\n            text: ''\n        }\n    };\n\n    openForm = () => { \n        this.setState ({\n            formOpen: true\n        });\n    };\n\n    closeForm = () => { \n        this.setState ({\n            formOpen: false\n        });\n    };\n\n    handleInputChange = e => {\n        this.setState({\n            text: e.target.value\n        });\n    };\n\n    handleAddColumn = () => {\n        const { dispatch } = this.props;\n        const { text } = this.state;\n\n        if(text) {\n            this.setState({\n                text: ''\n                })\n            dispatch(addColumn(text));\n        }\n\n        return;\n    };\n\n    handleAddCard = () => {\n        const { dispatch } = this.props;\n        const { text } = this.state;\n\n        if(text) {\n            this.setState({\n                text: ''\n                })\n            dispatch(addCard(text, this.props.id));\n        }   \n        return;     \n    }\n\n    buttonForm = () => {\n        const buttonText = (this.props.type === 'column') ? 'New List' : 'New Task';\n\n        return (\n            <button onClick={this.openForm} className=\"formbutton\" >\n                {buttonText}\n            </button> \n        )\n    }\n\n    addForm = () => {\n        const placeholder = (this.props.type === 'column') ? 'Add a new List' : 'Add a new Task';\n\n        return (\n            <div className='form'>\n                <textarea \n                    className='formInput'\n                    type='text'\n                    autoFocus\n                    placeholder={placeholder}\n                    onBlur={this.closeForm}\n                    onChange={this.handleInputChange}\n                    value={this.state.text}\n                    />\n                <button\n                    onMouseDown={(this.props.type === 'column') ? this.handleAddColumn : this.handleAddCard }\n                    className='addButton'\n                    >\n                        +\n                    </button>\n                <button \n                    className='closeButton'\n                    onClick={this.closeForm}\n                    >\n                        X\n                    </button>\n            </div>\n        )\n    }\n\n    render() {\n        return this.state.formOpen ? this.addForm() : this.buttonForm();\n    }\n}\n\nexport default connect () (TrelloForm);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\nimport TrelloCard from './TrelloCard'\nimport TrelloForm from './TrelloForm';\nimport { deleteColumn } from '../actions';\nimport './TrelloColumn.css';\n\n\nexport class TrelloColumn extends Component {\n    \n    handleDeleteColumn = () =>{\n        const { dispatch } = this.props\n        const columnId = this.props.id\n        dispatch(deleteColumn(columnId));\n     }\n\n    render() {\n        return (\n        <Draggable draggableId={String(this.props.id)} index={this.props.index}>\n         {provided => (\n            <div \n                ref={provided.innerRef} \n                {...provided.draggableProps}\n                {...provided.dragHandleProps}>\n            <Droppable droppableId={String(this.props.id)}>\n                {provided => (     \n                    <div \n                        ref={provided.innerRef} \n                        {...provided.droppableProps}\n                        className='column' \n                        id={this.props.id}>\n                            <div className='columnHeader'>\n                                    <h3 className='columnTitle'>{this.props.title}</h3>\n                                    <button \n                                        className='deleteButton'\n                                        onMouseDown={this.handleDeleteColumn}\n                                    > X </button> \n                            </div>\n                        {this.props.cards.map((card, index) => \n                        <TrelloCard \n                            text={card.text} \n                            key={card.id} \n                            id={card.id}\n                            index={index}\n                            columnId={this.props.id}\n                            deleteCard={this.props.deleteCard}/>)}\n                        <TrelloForm \n                            type='task' \n                            id={this.props.id} \n                            addCard={this.props.addCard}/>\n                        {provided.placeholder}\n                    </div>)}\n            </ Droppable>\n            </div>\n         )}\n        </Draggable>\n        )\n    }\n}\n\nexport default connect () (TrelloColumn);","import React, { Component } from 'react';\nimport TrelloColumn from './components/TrelloColumn';\nimport TrelloForm from './components/TrelloForm';\nimport { sort } from './actions';\nimport { connect } from 'react-redux';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport './App.css';\n\n\nexport class App extends Component {\n\n    onDragEnd = (result) => {\n        const { destination, source, draggableId, type } = result;\n        \n        if (!destination) {\n          return;\n        }\n        \n        this.props.dispatch (\n            sort(\n                source.droppableId,\n                destination.droppableId,\n                source.index,\n                destination.index,\n                draggableId,\n                type\n            )\n        )\n    };\n\n    render() {\n        const { lists } = this.props;\n        return (\n            <div className='backgroundApp'>\n            <DragDropContext onDragEnd={this.onDragEnd}>\n            <div className='App'>\n            <h1 className='AppTitle'>Trello Clone</h1>\n                <div className='AppContent'>\n                <Droppable droppableId='all-column' direction='horizontal' type='column'>\n                {provided => (\n                    <div \n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    className='AppContent'\n                    >\n                    {lists.map( (column,index) => \n                        <TrelloColumn\n                        type='column' \n                        index={index}\n                        key={column.id} \n                        title={column.title} \n                        cards={column.cards} \n                        id={column.id}\n                    />)}\n                {provided.placeholder}\n                </div>)}\n                </Droppable>\n                <TrelloForm \n                type='column' \n                />\n            </div>\n            </div>\n        </ DragDropContext>\n        </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    lists: state.lists\n})\n\nexport default connect (mapStateToProps) (App);\n","import { Actions } from '../actions';\n\n\nlet columnId = 2;\nlet cardId = 4;\n\nconst initialState = [\n    {title: \"TO DO\",\n      id: `column-${0}`,\n      cards: [\n        {id: `card-${0}`,\n          text: \"Blog and social post\"},\n        {id: `card-${1}`,\n          text: \"New landing page\"},\n      ]},\n      {title: \"DOING\",\n      id: `column-${1}`,\n      cards: [\n        {id: `card-${2}`,\n          text: \"Homepage design update\"},\n        {id: `card-${3}`,\n          \"text\": \"New user templates\"}\n      ]},\n    ];\n\nconst listReducer  = (state = initialState, action) => {\n    switch (action.type) {\n        case Actions.ADD_COLUMN:\n          const newColumn = {\n            title: action.payload,\n            id: `column-${columnId}`,\n            cards: []\n          };\n          columnId +=1\n          return [...state, newColumn];\n      \n          \n        case Actions.ADD_CARD:\n          const newCard = {\n            id: `card-${cardId}`,\n            text: action.payload.text\n          };\n          cardId +=1\n          const newState = state.map (column =>\n            column.id === action.payload.columnId\n            ? {...column, cards: [...column.cards, newCard]}\n            : column\n            )\n          return newState;\n\n              \n        case Actions.DELETE_COLUMN:\n          const newDeleteStateColumn = state.filter (column => column.id !== action.payload)\n          return newDeleteStateColumn;\n                \n        case Actions.DELETE_CARD:\n          const newDeleteStateCard = state.map (column =>\n            column.id === action.payload.columnId\n            ? {...column, cards: column.cards.filter (card => card.id !== action.payload.cardId)}\n            : column\n            )\n            console.log('delete')\n          return newDeleteStateCard;\n        \n        case Actions.DRAG_HAPPEND:\n            const{\n                droppableIdStart,\n                droppableIdEnd,\n                droppableIndexStart,\n                droppableIndexEnd,\n                draggableId,\n                type\n            } = action.payload;\n            const newDragState = [...state];\n        \n            //Dragging columns around\n            if (type === 'column') {\n              //const newState = [...state];\n              const column = newDragState.splice(droppableIndexStart,1);\n              newDragState.splice(droppableIndexEnd, 0, ...column);\n              return newDragState;\n            }\n        \n            //In the same column\n            if(droppableIdStart === droppableIdEnd) {\n              const column = newDragState.find(column => String(column.id) === String(droppableIdStart));\n              console.log(draggableId);\n              const card = column.cards.splice(droppableIndexStart,1);\n              column.cards.splice(droppableIndexEnd, 0, ...card);\n              return newDragState;\n            }\n        \n            //Other column\n            if(droppableIdStart !== droppableIdEnd) {\n              const columnStart = newDragState.find(column => String(column.id) === String(droppableIdStart));\n              const card = columnStart.cards.splice(droppableIndexStart,1);\n              console.log(draggableId);\n              const columnEnd = state.find(column => String(column.id) === String(droppableIdEnd));\n              columnEnd.cards.splice(droppableIndexEnd, 0, ...card);\n              return newDragState;\n            }\n          break;\n\n        default:\n          return state;\n        }\n      }\n\nexport default listReducer;","import { combineReducers } from 'redux';\nimport listReducer from './listReducer';\n\nexport default combineReducers ({\n    lists: listReducer\n});","import { createStore } from 'redux';\nimport rootReducer from '../reducers';\n\nconst store = createStore (rootReducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}